new.col <- c(new.col, is.element(df[i,2], cjt))
}
return(cbind(df, gen.glmnet=new.col))
}
running.gprofiler <- function(selected.genes, tam, data, df){
all.genes = list()
all.genes[[selected.genes[1,1]]] = df[1:tam[1], 2]
for (i in 2:nrow(selected.genes)) {
all.genes[[selected.genes[i,1]]] = df[(1+sum(tam[1:(i-1)])):(sum(tam[1:i])), 2]
}
background <- rownames(data)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
return(output.gprofiler2)
}
l <- vector[[1]]
# for (l in vector) {
tissue <- l[[1]]
seed <- l[[2]]
name <- l[[3]]
cat("\n\n Tissue", name, "\n\n")
sample.prefixes10 <- substr(colnames(tissue), 1,10)
sample.prefixes9 <- substr(colnames(tissue), 1,9)
common.elements.length10 <- intersect(sample.prefixes10,r)
common.elements.length9 <- intersect(sample.prefixes9,r)
indexes.age.length10 <- selectRows(r, common.elements.length10)
indexes.age.length9 <- selectRows(r, common.elements.length9)
indexes.samples.length10 <- selectRows(sample.prefixes10, common.elements.length10)
indexes.samples.length9 <- selectRows(sample.prefixes9, common.elements.length9)
data.characteristic <- data.age.num[c(indexes.age.length10,indexes.age.length9),c(3,4,11)]
age = data.characteristic$AGE
data = tissue[, c(indexes.samples.length10,indexes.samples.length9)]
nameGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nameGenesFileExpr <- rownames(data)
nameGenesFileExpr <- unlist(lapply(strsplit(nameGenesFileExpr, "\\."),function(x){ return(x[1])}))
genesBothFiles <- intersect(nameGenesFileExpr, nameGenes[,2])
ind.new.names <- selectRows(nameGenes[,2], genesBothFiles)
ind.old.names <-  selectRows(nameGenesFileExpr, genesBothFiles)
new.names <- as.character(nameGenes[ind.new.names,1])
data <- data[ind.old.names, ]
if(name == "Cerebellum"){
ind.rep <- which(new.names== "TMSB15B")
new.names[ind.rep[1]] <- "TMSB15B.1"
new.names[ind.rep[2]] <- "TMSB15B.2"
}
new.names <- as.factor(new.names)
rownames(data) <- new.names
# Preprocessing
m <- mean(age)
d <- sd(age)
age <- (age-m)/d
# Changing the scale
data <- log2(data + 1)
# Centering and normalizing data
preProc <- preProcess(data, method = c("center", "scale"))
data <- predict(preProc, data)
rm(preProc)
# Removing redundant predictors
r.data <- apply(data, 1, round)
ind <-nearZeroVar(r.data,freqCut = 20, uniqueCut = 5)
ind <-nearZeroVar(r.data,freqCut = 20, uniqueCut = 5)
data <- data[-ind,]
rm(r.data, ind)
correlation <- cor(t(data))
remove <- findCorrelation(correlation, cutoff=0.9)
data <- data[-remove,]
rm(correlation, remove)
# Running glmnet
set.seed(seed)
ind.train <- sample(1:ncol(data), 0.8*ncol(data))
data.train <-  t(data[,ind.train])
age.train <-  age[ind.train]
data.test <- t(data[,-ind.train])
age.test <- age[-ind.train]
cvfit<- cv.glmnet(data.train, age.train, alpha=1, family = "gaussian")
print(cvfit)
# We save the set of genes selected by glmnet to perform the prediction:
coefic <- as.matrix(coef(cvfit,s="lambda.min"))
non.zero.rows <- rownames(coefic)[which(coefic!=0)]
selected.genes <- data.frame(Genes = non.zero.rows[-1], Coefficients = coefic[which(coefic!=0)][-1])
# We calculate the clusters with a fixed size of 50 genes, run gprofiler and see how many terms we obtain
df <- calculateCorrelation(data, selected.genes[1,1], selected.genes[,1], 50)
for (i in 2:nrow(selected.genes)) {
df <- rbind(df, calculateCorrelation(data, selected.genes[i,1], selected.genes[,1], 50))
}
output.gprofiler2 <- running.gprofiler(selected.genes, rep(51, nrow(selected.genes)), data, df)
gprofiler2.result <- apply(output.gprofiler2$result, 2, as.character)
cat("\nNumber of rows obtained with gprofiler with 50 genes in each cluster:", nrow(output.gprofiler2$result), "\n")
# We calculate the clusters with the new strategy, order the genes according to the importance
# determined by glmnet and show the plots where we can see the evolution of the adjusted R2
# as we increase the number of genes that are part of the cluster.
# These plots are only shown for the 5 genes that glmnet has determined as most important.
indexes <- order(abs(selected.genes[,2]), decreasing = T)
sorted.genes <- selected.genes[indexes, ]
df <- calculateClusters(data, sorted.genes[1,1], sorted.genes[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(sorted.genes)) {
df_g <- calculateClusters(data, sorted.genes[i,1], sorted.genes[,1], data.train, age.train)
if(i <= 5)
plot(x = 2:(nrow(df_g)+1), y = df_g$Adjusted.R2, xlab = "number of genes", ylab= "Adjusted R2", main =paste("Evolution of adjusted R2", df_g[1,1]))
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
View(df)
tam3 <- tam
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (diff > 10^(-5)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
df <- calculateClusters(data, sorted.genes[1,1], sorted.genes[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(sorted.genes)) {
df_g <- calculateClusters(data, sorted.genes[i,1], sorted.genes[,1], data.train, age.train)
if(i <= 5)
plot(x = 2:(nrow(df_g)+1), y = df_g$Adjusted.R2, xlab = "number of genes", ylab= "Adjusted R2", main =paste("Evolution of adjusted R2", df_g[1,1]))
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
View(tam - tam3)
tam5 <- tam
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (diff > 10^(-6)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (diff > 10^(-3)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
df <- calculateClusters(data, sorted.genes[1,1], sorted.genes[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(sorted.genes)) {
df_g <- calculateClusters(data, sorted.genes[i,1], sorted.genes[,1], data.train, age.train)
if(i <= 5)
plot(x = 2:(nrow(df_g)+1), y = df_g$Adjusted.R2, xlab = "number of genes", ylab= "Adjusted R2", main =paste("Evolution of adjusted R2", df_g[1,1]))
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
tam3 <- tam
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (diff > 10^(-5)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
df <- calculateClusters(data, sorted.genes[1,1], sorted.genes[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(sorted.genes)) {
df_g <- calculateClusters(data, sorted.genes[i,1], sorted.genes[,1], data.train, age.train)
if(i <= 5)
plot(x = 2:(nrow(df_g)+1), y = df_g$Adjusted.R2, xlab = "number of genes", ylab= "Adjusted R2", main =paste("Evolution of adjusted R2", df_g[1,1]))
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
View(tam -tam3)
View(tam)
tam5 <- tam
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (diff > 10^(-6)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
df <- calculateClusters(data, sorted.genes[1,1], sorted.genes[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(sorted.genes)) {
df_g <- calculateClusters(data, sorted.genes[i,1], sorted.genes[,1], data.train, age.train)
if(i <= 5)
plot(x = 2:(nrow(df_g)+1), y = df_g$Adjusted.R2, xlab = "number of genes", ylab= "Adjusted R2", main =paste("Evolution of adjusted R2", df_g[1,1]))
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
View(tam-tam5)
sum(tam-tam5)
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (abs(diff) > 10^(-3)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
max(tam3)
max(tam5)
df <- calculateClusters(data, sorted.genes[1,1], sorted.genes[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(sorted.genes)) {
df_g <- calculateClusters(data, sorted.genes[i,1], sorted.genes[,1], data.train, age.train)
if(i <= 5)
plot(x = 2:(nrow(df_g)+1), y = df_g$Adjusted.R2, xlab = "number of genes", ylab= "Adjusted R2", main =paste("Evolution of adjusted R2", df_g[1,1]))
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
View(df)
sum(tam-tam3)
sum(tam-tam5)
max(tam)
library(devtools)
library(tidyverse)
library(fs)
document()
load_all()
check()
install()
build_readme()
check()
install()
install()
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github('juanbot/CoExpNets')
devtools::install_github("carmen-maria-hernandez/SuCoNets")
library(vctrs)
library(BiocManager)
library(preprocessCore)
library(limma)
library(impute)
library(sva)
library(WGCNA)
library(GOSim)
library(swamp)
library(tictoc)
selectRows <- function(x,y){
indexes = data.frame()
indexes = which(x==y[1])
for(n in 2:length(y)){
indexes[n] = which(x==y[n])
}
return(indexes)
}
checkOverlap <- function(genes, len.allgenes, df, tam){
overlap <- data_frame()
n <- intersect(genes, df[1:tam[1], 2])
test <-  CoExpNets::testGeneSet(n.module=length(genes),
n.module.and.specific=length(n),
total.specific=length(df[1:tam[1],2]),
total.net=len.allgenes)
if(test$p.value < 0.05){
add <- data.frame(supervised.net.gen = df[1,1], overlap.value = test$estimate, p.value = test$p.value)
overlap = rbind(overlap, add)
}
for (i in 2:length(tam)) {
supervised.mod <- df[(1+sum(tam[1:(i-1)])):(sum(tam[1:i])),]
n <- intersect(genes, supervised.mod[,2])
test <-  CoExpNets::testGeneSet(n.module=length(genes),
n.module.and.specific=length(n),
total.specific=length(supervised.mod[,2]),
total.net=len.allgenes)
if(test$p.value < 0.05){
add <- data.frame(supervised.net.gen = supervised.mod[1,1], overlap.value = test$estimate, p.value = test$p.value)
overlap = rbind(overlap, add)
}
}
return(overlap)
}
blood <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
r <- data.age.num$SUBJID
r <- gsub("-", ".", r)
vector <- vector(mode="list",1)
vector[[1]]<- list(blood, "Blood")
?SuCoNets::calculateClusters
l <- vector[[1]]
# for (l in vector) {
tissue <- l[[1]]
name <- l[[2]]
sample.prefixes10 <- substr(colnames(tissue), 1,10)
sample.prefixes9 <- substr(colnames(tissue), 1,9)
common.elements.length10 <- intersect(sample.prefixes10,r)
common.elements.length9 <- intersect(sample.prefixes9,r)
indexes.age.length10 <- selectRows(r, common.elements.length10)
indexes.age.length9 <- selectRows(r, common.elements.length9)
indexes.samples.length10 <- selectRows(sample.prefixes10, common.elements.length10)
indexes.samples.length9 <- selectRows(sample.prefixes9, common.elements.length9)
data.characteristic <- data.age.num[c(indexes.age.length10,indexes.age.length9),c(3,4,11)]
age = data.characteristic$AGE
data = tissue[, c(indexes.samples.length10,indexes.samples.length9)]
nameGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nameGenesFileExpr <- rownames(data)
nameGenesFileExpr <- unlist(lapply(strsplit(nameGenesFileExpr, "\\."),function(x){ return(x[1])}))
genesBothFiles <- intersect(nameGenesFileExpr, nameGenes[,2])
ind.new.names <- selectRows(nameGenes[,2], genesBothFiles)
ind.old.names <-  selectRows(nameGenesFileExpr, genesBothFiles)
new.names <- as.character(nameGenes[ind.new.names,1])
data <- data[ind.old.names, ]
new.names <- as.factor(new.names)
rownames(data) <- new.names
age2 <- SuCoNets::normalize(age)
m <- age2[1]
d <- age2[2]
age2 <- age2[-c(1,2)]
data2 <- SuCoNets::scn(data)
data2 <- SuCoNets::rRedundantPredictors(data2)
seed <- SuCoNets::bestSeed(data2,age2)
cvfit <- SuCoNets::glmnetGenes(data2,age2, seed)
selected.genes <- SuCoNets::detectGenes(data2,age2,cvfit)
new.network.variable <- SuCoNets::coexpressionNetworkVariable(data, selected.genes, age, seed)
View(new.network.variable[[1]])
knitr::opts_chunk$set(echo = TRUE)
blood <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
selectRows <- function(x,y){
indexes = data.frame()
indexes = which(x==y[1])
for(n in 2:length(y)){
indexes[n] = which(x==y[n])
}
return(indexes)
}
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (diff > 10^(-5)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
max(new.network.variable[[2]])
rm(calculateClusters())
rm(calculateClusters
)
SuCoNets::calculateClusters()
SuCoNets::calculateClusters
version
selectGenes()
