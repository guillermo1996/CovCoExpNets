geom_histogram(bins = 5) +
geom_density(alpha=.2, fill="#FF6666")
print(p)
p <- ggplot(df_age, aes(x=age, y = ..density..)) +
geom_histogram(bins = 10) +
geom_density(alpha=.2, fill="#FF6666")
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 10) +
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 10)
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 15)
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 15)+
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20))
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 15) +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20))
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20))
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20)) +
scale_x_discrete(labels=seq(10, 100, 10))
print(p)
p <- ggplot(df_age, aes(x=as.numeric(age))) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20)) +
scale_x_discrete(labels=seq(10, 100, 10))
print(p)
p <- ggplot(df_age, aes(x=as.numeric(age))) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20))
print(p)
p <- ggplot(df_age, aes(x=as.numeric(age))) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 0.5),1))
p <- ggplot(df_age, aes(x=as.numeric(age))) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = round(seq(min(df_age$age), max(df_age$age), by = 0.5),1))
print(p)
p <- ggplot(df_age, aes(x=as.numeric(age))) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = round(seq(min(df_age$age), max(df_age$age), by = 5),1))
print(p)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = round(seq(min(df_age$age), max(df_age$age), by = 5),1))
print(p)
bt
i <- 11
bt = brain_tissues_short[i]
bt_long = brain_tissues[i]
cat("(", i, "/", len_bt ,") Comenzamos con ", bt, "\n", sep="")
#Cargamos los datos
data <- readRDS(paste0(datasets_folder, "data_", bt, ".rds"))
age <- readRDS(paste0(datasets_folder, "age_", bt, ".rds"))
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
bt
new_age <- age*d + m
df_age <- data.frame(
age = new_age
)
p <- ggplot(df_age, aes(x=age)) +
geom_histogram(bins = 15, fill = "gray", colour = "black") +
theme_tufte() +
theme(axis.line = element_line(size = 1),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = round(seq(min(df_age$age), max(df_age$age), by = 5),1))
print(p)
library(SuCoNets)
library(doParallel)
library(dplyr)
library(stringr)
library(ggplot2)
datasets_folder <- "datasets_bt/"
models_folder <- "models_bt/"
images_folder <- "images_bt/"
dir.create(models_folder)
dir.create(images_folder)
brain_tissues <- readRDS(paste0(datasets_folder, "brain_tissues.rds"))
brain_tissues_short <- gsub(" ", "", brain_tissues, fixed = TRUE)
registerDoParallel(4)
len_bt <- length(brain_tissues)
r <- foreach(i = 1:len_bt) %:% when(i) %do%{
bt = brain_tissues_short[i]
bt_long = brain_tissues[i]
cat("(", i, "/", len_bt ,") Comenzamos con ", bt, "\n", sep="")
#Cargamos los datos
data <- readRDS(paste0(datasets_folder, "data_", bt, ".rds"))
age <- readRDS(paste0(datasets_folder, "age_", bt, ".rds"))
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
}
r <- foreach(i = 1:len_bt) %:% when(i == 1) %do%{
bt = brain_tissues_short[i]
bt_long = brain_tissues[i]
cat("(", i, "/", len_bt ,") Comenzamos con ", bt, "\n", sep="")
#Cargamos los datos
data <- readRDS(paste0(datasets_folder, "data_", bt, ".rds"))
age <- readRDS(paste0(datasets_folder, "age_", bt, ".rds"))
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
}
bootstrap_selection <- function(data, age, B = 20){
rmse.train = numeric(B)
rmse.test = numeric(B)
foreach(j = 1:B) %:% when(i) %do%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B <- predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.rmse(covariate.train.B, pred.train.B, length(selected.genes.B[, 1]))
pred.test.B <- predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.rmse(covariate.test.B, pred.test.B, length(selected.genes.B[, 1]))
}
}
bootstrap_selection(data, age)
bootstrap_selection <- function(data, age, B = 20){
rmse.train = numeric(B)
rmse.test = numeric(B)
foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B <- predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.rmse(covariate.train.B, pred.train.B, length(selected.genes.B[, 1]))
pred.test.B <- predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.rmse(covariate.test.B, pred.test.B, length(selected.genes.B[, 1]))
}
}
bootstrap_selection(data, age)
bootstrap_selection <- function(data, age, B = 20){
rmse.train = numeric(B)
rmse.test = numeric(B)
foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B <- predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B, length(selected.genes.B[, 1]))
pred.test.B <- predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B, length(selected.genes.B[, 1]))
}
}
bootstrap_selection(data, age, B=1)
bootstrap_selection <- function(data, age, B = 20){
rmse.train = numeric(B)
rmse.test = numeric(B)
foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B <- predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B <- predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
}
}
bootstrap_selection(data, age, B=1)
rmse.train = numeric(B)
rmse.test = numeric(B)
b = 1
B = 1
rmse.train = numeric(B)
rmse.test = numeric(B)
foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B <- predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B <- predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
}
rmse.test[1] = 1
foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
}
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
j = 1
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
B = 10
rmse.train = numeric(B)
rmse.test = numeric(B)
foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
}
bootstrap_selection <- function(data, age, B = 20){
rmse.train <- numeric(B)
rmse.test <- numeric(B)
foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
selected.genes.B = detectGenes(data, covariate, cvfit.B)
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
}
}
bootstrap_selection(data, age, B=1)
bootstrap_selection(data, age, B=10)
rmse.train <- numeric(B)
rmse.test <- numeric(B)
genes.subset = foreach(j = 1:B) %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
selected.genes.B = detectGenes(data, covariate, cvfit.B)
}
View(genes.subset)
rmse.train <- numeric(B)
rmse.test <- numeric(B)
genes.subset = foreach(j = 1:B, .combine = "rbind") %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
detectGenes(data, covariate, cvfit.B)
}
View(genes.subset)
genes.subset = table(genes.subset$Genes, dnn = "Genes") %>%
as.data.frame() %>%
arrange(desc(Freq))
genes.subset = genes.subset %>% filter(Freq >= n) %>% pull(Genes)
prop.table(table(genes.subset$Genes, dnn = "Genes"))
table(genes.subset$Genes, dnn = "Genes")
genes.subset = foreach(j = 1:B, .combine = "rbind") %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
detectGenes(data, covariate, cvfit.B)
}
View(genes.subset)
test <- table(genes.subset$Genes, dnn = "Genes")
test <- as.data.frame(table(genes.subset$Genes, dnn = "Genes"))
View(test)
test <- table(genes.subset$Genes, dnn = "Genes")
prop.table(test)
test_2 <- prop.table(test)
View(test_2)
test <- table(genes.subset$Genes, dnn = "Genes")
test <- as.data.frame(table(genes.subset$Genes, dnn = "Genes"))
View(test)
test$Freq <- test$Freq / B
genes.subset = table(genes.subset$Genes, dnn = "Genes") %>%
as.data.frame() %>%
mutate(Freq = Freq / B)
View(genes.subset)
genes.subset = foreach(j = 1:B, .combine = "rbind") %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
detectGenes(data, covariate, cvfit.B)
}
n = 0.5
genes.subset = table(genes.subset$Genes, dnn = "Genes") %>%
as.data.frame() %>%
mutate(Freq = Freq / B) %>%
arrange(desc(Freq))
View(genes.subset)
genes.subset = genes.subset %>% filter(Freq >= n) %>% pull(Genes)
genes.subset = as.character(genes.subset)
bootstrap_selection <- function(data, age, B = 20, n = 0.5){
rmse.train <- numeric(B)
rmse.test <- numeric(B)
genes.subset = foreach(j = 1:B, .combine = "rbind") %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
detectGenes(data, covariate, cvfit.B)
}
genes.subset = table(genes.subset$Genes, dnn = "Genes") %>%
as.data.frame() %>%
mutate(Freq = Freq / B) %>%
arrange(desc(Freq))
genes.subset = genes.subset %>% filter(Freq >= n) %>% pull(Genes)
genes.subset = as.character(genes.subset)
}
bootstrap_selection(data, age, B=20, n=0.5)
genes.subset = bootstrap_selection(data, age, B=20, n=0.5)
bootstrap_selection <- function(data, age, B = 20, n = 0.5){
rmse.train <- numeric(B)
rmse.test <- numeric(B)
genes.subset = foreach(j = 1:B, .combine = "rbind") %:% when(i) %dopar%{
ind.train = sample(1:ncol(data), ncol(data), replace = TRUE)
data.train.B = t(data[, ind.train])
covariate.train.B = age[ind.train]
data.test.B = t(data[, -unique(ind.train)])
covariate.test.B = age[-unique(ind.train)]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
rmse.train[j] <- get.RMSE(covariate.train.B, pred.train.B)
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
rmse.test[j] <- get.RMSE(covariate.test.B, pred.test.B)
detectGenes(data, covariate, cvfit.B)
}
genes.subset = table(genes.subset$Genes, dnn = "Genes") %>%
as.data.frame() %>%
mutate(Freq = Freq / B) %>%
arrange(desc(Freq))
genes.subset = genes.subset %>% filter(Freq >= n) %>% pull(Genes)
genes.subset = as.character(genes.subset)
}
r <- foreach(i = 1:len_bt) %:% when(i) %do%{
bt = brain_tissues_short[i]
bt_long = brain_tissues[i]
cat("(", i, "/", len_bt ,") Comenzamos con ", bt, "\n", sep="")
#Cargamos los datos
data <- readRDS(paste0(datasets_folder, "data_", bt, ".rds"))
age <- readRDS(paste0(datasets_folder, "age_", bt, ".rds"))
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
genes.subset <- bootstrap_selection(data, age, B = 30, n = 0.5)
cvfit <- glmnetGenesSubset(data, age, genes.subset)
glmnet::print.cv.glmnet(cvfit)
}
library(SuCoNets)
library(SuCoNets)
library(doParallel)
library(dplyr)
library(stringr)
library(ggplot2)
datasets_folder <- "datasets_bt/"
models_folder <- "models_bt/"
images_folder <- "images_bt/"
dir.create(models_folder)
dir.create(images_folder)
brain_tissues <- readRDS(paste0(datasets_folder, "brain_tissues.rds"))
brain_tissues_short <- gsub(" ", "", brain_tissues, fixed = TRUE)
registerDoParallel(4)
len_bt <- length(brain_tissues)
r <- foreach(i = 1:len_bt) %:% when(i) %do%{
bt = brain_tissues_short[i]
bt_long = brain_tissues[i]
cat("(", i, "/", len_bt ,") Comenzamos con ", bt, "\n", sep="")
#Cargamos los datos
data <- readRDS(paste0(datasets_folder, "data_", bt, ".rds"))
age <- readRDS(paste0(datasets_folder, "age_", bt, ".rds"))
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
genes.subset <- geneSelectionBootstrap(data, age, B = 30, n = 0.5)
cvfit <- glmnetGenesSubset(data, age, genes.subset)
glmnet::print.cv.glmnet(cvfit)
}
dir.create(models_folder)
datasets_folder <- "datasets_bt/"
models_folder <- "models_bt_bootstrap/"
images_folder <- "images_bt/"
dir.create(models_folder)
dir.create(images_folder)
brain_tissues <- readRDS(paste0(datasets_folder, "brain_tissues.rds"))
brain_tissues_short <- gsub(" ", "", brain_tissues, fixed = TRUE)
registerDoParallel(4)
len_bt <- length(brain_tissues)
r <- foreach(i = 1:len_bt) %:% when(i) %do%{
bt = brain_tissues_short[i]
bt_long = brain_tissues[i]
cat("(", i, "/", len_bt ,") Comenzamos con ", bt, "\n", sep="")
#Cargamos los datos
data <- readRDS(paste0(datasets_folder, "data_", bt, ".rds"))
age <- readRDS(paste0(datasets_folder, "age_", bt, ".rds"))
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
genes.subset <- geneSelectionBootstrap(data, age, B = 30, n = 0.5)
cvfit <- glmnetGenesSubset(data, age, genes.subset)
glmnet::print.cv.glmnet(cvfit)
selected.genes <- detectGenes(data, age, cvfit)
saveRDS(genes.subset, paste0(models_folder, "genes.subset_", bt, ".rds"))
saveRDS(cvfit, paste0(models_folder, "cvfit_", bt, ".rds"))
saveRDS(selected.genes, paste0(models_folder, "selected.genes_", bt, ".rds"))
}
boot.RMSE(brain_tissues, dataset_folder, models_folder, B = 20)
