seeds = sample(999999999, B)
df.rmse.i <- foreach(j = 1:B, .combine = "rbind") %do%{
set.seed(seeds[j])
ind.train.B = sample(1:ncol(data.i), ncol(data.i), replace = TRUE, prob = sample.prob.i)
data.train.B = t(data.i[genes.subset.i, ind.train.B])
covariate.train.B = covariate.i[ind.train.B]
data.test.B = t(data.i[genes.subset.i, -ind.train.B])
covariate.test.B = covariate.i[-ind.train.B]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, kfold=k, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
# if(!missing(m) & !missing(d)){
#   pred.train.B = pred.train.B*d.i + m.i
#   pred.test.B = pred.test.B*d.i + m.i
#   covariate.train.B = covariate.train.B*d.i + m.i
#   covariate.test.B = covariate.train.B*d.i + m.i
rmse.train.B = MLmetrics::RMSE(pred.train.B*d.i + m.i, covariate.train.B*d.i + m.i)
rmse.test.B = MLmetrics::RMSE(pred.test.B*d.i + m.i, covariate.test.B*d.i + m.i)
if(is.null(names(data)[i])) cond.name = "Condition" else cond.name = names(data)[i]
data.frame(Condition = cond.name, rmse.train = rmse.train.B, rmse.test = rmse.test.B)
}
df.rmse.i
}
if(!do.boxplot){
df.rmse.group = df.rmse %>%
dplyr::group_by(Condition) %>%
dplyr::summarize(mean.rmse.train = mean(rmse.train),
sd.rmse.train = sd(rmse.train),
mean.rmse.test = mean(rmse.test),
sd.rmse.test = sd(rmse.test))
rmse.plot = ggplot2::ggplot(df.rmse.group, ggplot2::aes(x = Condition, y = mean.rmse.test)) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue", color = "black") +
#ggplot2::geom_bar(data = df.rmse.group, ggplot2::aes(x = Condition, y = mean.rmse.train)) +
ggplot2::geom_errorbar(ggplot2::aes(ymin = mean.rmse.test - sd.rmse.test,
ymax = mean.rmse.test + sd.rmse.test),
width = .2,
position = ggplot2::position_dodge(.9)) +
ggplot2::scale_y_continuous(expand = c(0, 0),
limits = c(0, 1.07*(max(df.rmse.group$mean.rmse.test) +
max(df.rmse.group$sd.rmse.test))))
}else{
rmse.plot = ggplot2::ggplot(df.rmse, ggplot2::aes(x = Condition, y = rmse.test)) +
ggplot2::geom_boxplot(fill = "steelblue")
#ggplot2::stat_summary(fun = mean, geom="point", size=2, color="red") +
}
rmse.plot = rmse.plot +
ggplot2::theme(axis.text.x = ggplot2::element_text(face = "bold", angle = -75, vjust = 0.5, hjust = 0)) +
ggplot2::theme(axis.text.y = ggplot2::element_text(face = "bold")) +
ggplot2::theme(axis.title.x = ggplot2::element_blank()) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour = "black", fill = NA, size = .5)) +
ggplot2::theme(aspect.ratio = 9/20) +
ggplot2::labs(y = "RMSE") +
ggplot2::ggtitle(bquote("RMSE by condition"))
if(length(data) == 1) rmse.plot = rmse.plot + ggplot2::theme(aspect.ratio = 20/9)
return(rmse.plot)
}
plotRMSE(data.combined[1:3], age.combined[1:3], genes.subset.combined[1:3], m = m.combined, d = d.combined)
doParallel::registerDoParallel(4)
plotRMSE(data.combined, age.combined, genes.subset.combined, m = m.combined, d = d.combined)
plotRMSE(data.combined, age.combined, genes.subset.combined)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(stringr)
library(SuCoNets)
library(doParallel)
library(glmnet)
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path.datasets <- "../datasets/"
path.variables <- "variables/"
# Elegimos el tejido
tissue.selection <- "Brain"
load.data <- !file.exists(paste0(path.variables, "data.combined.rds"))
load.age <- !file.exists(paste0(path.variables, "age.combined.rds"))
if(load.data){
df.samples_data <- fread(paste0(path.datasets, "sample_data.txt"))
df.samples_data <- df.samples_data[df.samples_data$SMTS == tissue.selection]
}
if(load.data){
# Generamos un data con todos los tejidos. El data no está preprocesado.
df.samples <- fread(paste0(path.datasets, "samples.gct"))
match_samples = intersect(colnames(df.samples), df.samples_data$SAMPID)
data <- df.samples[, ..match_samples]
data <- as.matrix(data, rownames = df.samples$Name)
# Eliminamos la variable de todos los datos, ya no la necesitamos
rm(df.samples)
gc()
}
if(load.data){
library(caret)
dmy.matrix <- caret::dummyVars("SAMPID ~ SMTSD", data = df.samples_data)
df.bool_data <- data.frame(predict(dmy.matrix, newdata = df.samples_data))
colnames(df.bool_data) <- conditions.names
rownames(df.bool_data) <- df.samples_data$SAMPID
df.bool_data <- df.bool_data[match_samples, ]
}
if(load.data){
data.combined <- dataSelection(data, df.bool_data)
rm(data, df.samples_data)
gc()
}
if(load.data){
doParallel::registerDoParallel(2)
data.combined <- dataPreprocess(data.combined)
dir.create(path.variables)
saveRDS(data.combined, paste0(path.variables, "data.combined.rds"))
}
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
data.combined[1:2] %>% reduce(left_join, by = "i")
if(!load.data) data.combined <- readRDS(paste0(path.variables, "data.combined.rds"))
data.combined[1:2] %>% reduce(left_join, by = "i")
data.combined[1:2] %>% reduce(full_join, by = "i")
Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "i", all.x = TRUE),
data.combined[1:2])
Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, all.x = TRUE),
data.combined[1:2])
gc()
data.combined[["Cortex"]]
typeof(data.combined[["Cortex"]])
typeof(data.combined["Cortex"])
typeof(data.combined[c("Cortex", "Frontal Cortex (BA9)"])
typeof(data.combined[c("Cortex", "Frontal Cortex (BA9)")])
typeof(data.combined[[c("Cortex", "Frontal Cortex (BA9)")]])
setwd("~/TFM/p6-SuCoNets_modifications_extra")
knitr::opts_chunk$set(echo = TRUE)
library(SuCoNets)
library(data.table)
#library(stringr)
#library(doParallel)
#library(glmnet)
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path.datasets <- "../datasets/"
path.variables <- "variables/"
# Comprobamos si ya hemos creado los datos previamente
load.data <- !file.exists(paste0(path.variables, "data.combined.rds"))
load.age <- !file.exists(paste0(path.variables, "age.combined.rds"))
if(load.data){
# Elejimos el órganos
tissue.selection <- "Brain"
df.samples_data <- fread(paste0(path.datasets, "sample_data.txt"))
df.samples_data <- df.samples_data[df.samples_data$SMTS == tissue.selection]
}
if(load.data){
# Generamos un data con todos los tejidos. El data no está preprocesado.
df.samples <- fread(paste0(path.datasets, "samples.gct"))
match_samples = intersect(colnames(df.samples), df.samples_data$SAMPID)
data <- df.samples[, ..match_samples]
data <- as.matrix(data, rownames = df.samples$Name)
# Eliminamos la variable de todos los datos, ya no la necesitamos
rm(df.samples)
gc()
}
if(load.data){
library(caret)
dmy.matrix <- caret::dummyVars("SAMPID ~ SMTSD", data = df.samples_data)
df.bool_data <- data.frame(predict(dmy.matrix, newdata = df.samples_data))
colnames(df.bool_data) <- conditions.names
rownames(df.bool_data) <- df.samples_data$SAMPID
df.bool_data <- df.bool_data[match_samples, ]
}
if(load.data){
data <- dataSelection(data, df.bool_data)
rm(df.samples_data)
gc()
}
if(load.data){
doParallel::registerDoParallel(2)
data.combined <- dataPreprocess(data)
dir.create(path.variables)
saveRDS(data, paste0(path.variables, "data.combined.rds"))
}
if(!load.data) data <- readRDS(paste0(path.variables, "data.combined.rds"))
generateAge <- function(data, df.subjects){
if(!is(data, "list")){
data <- list(data)
input.list = T
} else input.list = F
age.combined <- foreach(i = 1:length(data), .combine = "c") %dopar%{
data.i = data[[i]]
sample_donnors = c()
for(name in colnames(data.i)){
split_id = str_split(name, "-", simplify = TRUE)
donnor_id = paste0(split_id[1], "-", split_id[2])
sample_donnors = c(sample_donnors, donnor_id)
}
age.tissue = merge(sample_donnors, df.subjects, by.x="x", by.y="SUBJID")$AGE
age.tissue <- list(age.tissue)
names(age.tissue) <- names(data)[i]
age.tissue
}
if(input.list){
return(age.combined[[1]])
}else{
return(age.combined)
}
}
if(load.age){
df.subjects <- fread(paste0(path.datasets, "subject_data.txt"))
age <- generateAge(data, df.subjects)
rm(df.subjects)
gc()
}
if(load.age){
age <- normalize(age)
dir.create(path.variables)
saveRDS(age, paste0(path.variables, "age.combined.rds"))
}
if(!load.age){
age <- readRDS(paste0(path.variables, "age.combined.rds"))
}
m <- lapply(age, function(x) x[1])
d <- lapply(age, function(x) x[2])
age <- lapply(age, function(x) x[-c(1, 2)])
doParallel::registerDoParallel(6)
system.time(genes.subset.combined <- geneSelection(data, age))
library(SuCoNets)
system.time(genes.subset.combined <- geneSelection(data, age))
#library(stringr)
library(doParallel)
doParallel::registerDoParallel(6)
system.time(genes.subset.combined <- geneSelection(data, age))
library(dplyr)
if(!file.exists(paste0(path.variables, "genes.subset.combined.rds"))){
doParallel::registerDoParallel(6)
system.time(genes.subset.combined <- geneSelection(data, age))
saveRDS(genes.subset.combined, paste0(path.variables, "genes.subset.combined.rds"))
}else{
genes.subset.combined <- readRDS(paste0(path.variables, "genes.subset.combined.rds"))
}
doParallel::registerDoParallel(6)
system.time(genes.subset.combined <- geneSelection(data, age))
doParallel::registerDoParallel(4)
cvfit <- glmnetGenesSubset(data, age, genes.subset)
library(glmnet)
doParallel::registerDoParallel(4)
cvfit <- glmnetGenesSubset(data, age, genes.subset)
genes.subset <- readRDS(paste0(path.variables, "genes.subset.combined.rds"))
cvfit <- glmnetGenesSubset(data, age, genes.subset)
selected.genes <- detectGenes(cvfit)
doParallel::registerDoParallel(4)
cvfit <- glmnetGenesSubset(data, age, genes.subset)
selected.genes <- detectGenes(cvfit)
glmnet::print.cv.glmnet(cvfit[[1]])
glmnet::print.cv.glmnet(cvfit[[2]])
glmnet::print.cv.glmnet(cvfit[[3]])
if(is(selected.genes, "list")){
for(i in 1:length(selected.genes)){
cat("Genes predictores para ",
names(selected.genes[i]),
": ", nrow(selected.genes[[i]]),
#" (de ", length(genes.subset.combined[[i]]), ")",
"\n", sep = "")
}
}else{
cat("Genes predictores:", nrow(selected.genes))
}
?running.gprofiler
plotRMSE(data.combined, age.combined, genes.subset.combined)
plotRMSE(data, age, genes.subset)
#' @param genes.subset list of selected predictors for each condition
#' @param B number of bootstrap resamples. Defaults to 20
#' @param sample.prob list of numeric vectors as weights when applying
#'   \link[base]{sample}
#' @param k number of kfolds to execute in the GLMNET algorithm
#'   (\link[glmnet]{cv.glmnet}). Defaults to 10
#' @param do.boxplot boolean to do a boxplot or a barplot. Defaults to False
#'
#' @return ggplot2 object
#' @export
plotRMSE <- function(data, covariate, genes.subset, m = 0, d = 1, B = 20, sample.prob = c(), k = 10, do.boxplot = FALSE){
if(!is(data, "list")){
data = list(data)
covariate = list(covariate)
genes.subset= list(genes.subset)
m = list(m)
d = list(d)
}else{
if(!is(m, "list") || !is(d, "list")){
m = rep(length(data), 0)
d = rep(length(data), 1)
}
}
df.rmse = foreach(i = 1:length(data), .combine = "rbind") %dopar% {
data.i = data[[i]]
covariate.i = covariate[[i]]
genes.subset.i = genes.subset[[i]]
sample.prob.i = sample.prob[[i]]
m.i = m[[i]]
d.i = d[[i]]
set.seed(0)
seeds = sample(999999999, B)
df.rmse.i <- foreach(j = 1:B, .combine = "rbind") %do%{
set.seed(seeds[j])
ind.train.B = sample(1:ncol(data.i), ncol(data.i), replace = TRUE, prob = sample.prob.i)
data.train.B = t(data.i[genes.subset.i, ind.train.B])
covariate.train.B = covariate.i[ind.train.B]
data.test.B = t(data.i[genes.subset.i, -ind.train.B])
covariate.test.B = covariate.i[-ind.train.B]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, kfold=k, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
# if(!missing(m) & !missing(d)){
#   pred.train.B = pred.train.B*d.i + m.i
#   pred.test.B = pred.test.B*d.i + m.i
#   covariate.train.B = covariate.train.B*d.i + m.i
#   covariate.test.B = covariate.train.B*d.i + m.i
rmse.train.B = MLmetrics::RMSE(pred.train.B*d.i + m.i, covariate.train.B*d.i + m.i)
rmse.test.B = MLmetrics::RMSE(pred.test.B*d.i + m.i, covariate.test.B*d.i + m.i)
if(is.null(names(data)[i])) cond.name = "Condition" else cond.name = names(data)[i]
data.frame(Condition = cond.name, rmse.train = rmse.train.B, rmse.test = rmse.test.B)
}
df.rmse.i
}
if(!do.boxplot){
df.rmse.group = df.rmse %>%
dplyr::group_by(Condition) %>%
dplyr::summarize(mean.rmse.train = mean(rmse.train),
sd.rmse.train = sd(rmse.train),
mean.rmse.test = mean(rmse.test),
sd.rmse.test = sd(rmse.test))
rmse.plot = ggplot2::ggplot(df.rmse.group, ggplot2::aes(x = Condition, y = mean.rmse.test)) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue", color = "black") +
#ggplot2::geom_bar(data = df.rmse.group, ggplot2::aes(x = Condition, y = mean.rmse.train)) +
ggplot2::geom_errorbar(ggplot2::aes(ymin = mean.rmse.test - sd.rmse.test,
ymax = mean.rmse.test + sd.rmse.test),
width = .2,
position = ggplot2::position_dodge(.9)) +
ggplot2::scale_y_continuous(expand = c(0, 0),
limits = c(0, 1.07*(max(df.rmse.group$mean.rmse.test) +
max(df.rmse.group$sd.rmse.test))))
}else{
rmse.plot = ggplot2::ggplot(df.rmse, ggplot2::aes(x = Condition, y = rmse.test)) +
ggplot2::geom_boxplot(fill = "steelblue")
#ggplot2::stat_summary(fun = mean, geom="point", size=2, color="red") +
}
rmse.plot = rmse.plot +
ggplot2::theme(axis.text.x = ggplot2::element_text(face = "bold", angle = -75, vjust = 0.5, hjust = 0)) +
ggplot2::theme(axis.text.y = ggplot2::element_text(face = "bold")) +
ggplot2::theme(axis.title.x = ggplot2::element_blank()) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour = "black", fill = NA, size = .5)) +
ggplot2::theme(aspect.ratio = 9/20) +
ggplot2::labs(y = "RMSE") +
ggplot2::ggtitle(bquote("RMSE by condition"))
if(length(data) == 1) rmse.plot = rmse.plot + ggplot2::theme(aspect.ratio = 20/9)
return(rmse.plot)
}
plotRMSE(data, age, genes.subset)
m = 0
d = 1
!is(m, "list") || !is(d, "list")
m = rep(length(data), 0)
d = rep(length(data), 1)
m = list(rep(length(data), 0))
m = rep(length(data), list(0))
rep(10, list(1))
?rep
rep(list(1), 10)
rep(1, 10)
#' @param genes.subset list of selected predictors for each condition
#' @param B number of bootstrap resamples. Defaults to 20
#' @param sample.prob list of numeric vectors as weights when applying
#'   \link[base]{sample}
#' @param k number of kfolds to execute in the GLMNET algorithm
#'   (\link[glmnet]{cv.glmnet}). Defaults to 10
#' @param do.boxplot boolean to do a boxplot or a barplot. Defaults to False
#'
#' @return ggplot2 object
#' @export
plotRMSE <- function(data, covariate, genes.subset, m = 0, d = 1, B = 20, sample.prob = c(), k = 10, do.boxplot = FALSE){
if(!is(data, "list")){
data = list(data)
covariate = list(covariate)
genes.subset= list(genes.subset)
m = list(m)
d = list(d)
}else{
if(!is(m, "list") || !is(d, "list")){
m = rep(list(0), length(data))
d = rep(list(1), length(data))
}
}
df.rmse = foreach(i = 1:length(data), .combine = "rbind") %dopar% {
data.i = data[[i]]
covariate.i = covariate[[i]]
genes.subset.i = genes.subset[[i]]
sample.prob.i = sample.prob[[i]]
m.i = m[[i]]
d.i = d[[i]]
set.seed(0)
seeds = sample(999999999, B)
df.rmse.i <- foreach(j = 1:B, .combine = "rbind") %do%{
set.seed(seeds[j])
ind.train.B = sample(1:ncol(data.i), ncol(data.i), replace = TRUE, prob = sample.prob.i)
data.train.B = t(data.i[genes.subset.i, ind.train.B])
covariate.train.B = covariate.i[ind.train.B]
data.test.B = t(data.i[genes.subset.i, -ind.train.B])
covariate.test.B = covariate.i[-ind.train.B]
cvfit.B = glmnet::cv.glmnet(data.train.B, covariate.train.B, alpha=1, kfold=k, family = "gaussian")
pred.train.B = predict(cvfit.B, s = "lambda.min", newx = data.train.B, type = "response")
pred.test.B = predict(cvfit.B, s = "lambda.min", newx = data.test.B, type = "response")
# if(!missing(m) & !missing(d)){
#   pred.train.B = pred.train.B*d.i + m.i
#   pred.test.B = pred.test.B*d.i + m.i
#   covariate.train.B = covariate.train.B*d.i + m.i
#   covariate.test.B = covariate.train.B*d.i + m.i
rmse.train.B = MLmetrics::RMSE(pred.train.B*d.i + m.i, covariate.train.B*d.i + m.i)
rmse.test.B = MLmetrics::RMSE(pred.test.B*d.i + m.i, covariate.test.B*d.i + m.i)
if(is.null(names(data)[i])) cond.name = "Condition" else cond.name = names(data)[i]
data.frame(Condition = cond.name, rmse.train = rmse.train.B, rmse.test = rmse.test.B)
}
df.rmse.i
}
if(!do.boxplot){
df.rmse.group = df.rmse %>%
dplyr::group_by(Condition) %>%
dplyr::summarize(mean.rmse.train = mean(rmse.train),
sd.rmse.train = sd(rmse.train),
mean.rmse.test = mean(rmse.test),
sd.rmse.test = sd(rmse.test))
rmse.plot = ggplot2::ggplot(df.rmse.group, ggplot2::aes(x = Condition, y = mean.rmse.test)) +
ggplot2::geom_bar(stat = "identity", fill = "steelblue", color = "black") +
#ggplot2::geom_bar(data = df.rmse.group, ggplot2::aes(x = Condition, y = mean.rmse.train)) +
ggplot2::geom_errorbar(ggplot2::aes(ymin = mean.rmse.test - sd.rmse.test,
ymax = mean.rmse.test + sd.rmse.test),
width = .2,
position = ggplot2::position_dodge(.9)) +
ggplot2::scale_y_continuous(expand = c(0, 0),
limits = c(0, 1.07*(max(df.rmse.group$mean.rmse.test) +
max(df.rmse.group$sd.rmse.test))))
}else{
rmse.plot = ggplot2::ggplot(df.rmse, ggplot2::aes(x = Condition, y = rmse.test)) +
ggplot2::geom_boxplot(fill = "steelblue")
#ggplot2::stat_summary(fun = mean, geom="point", size=2, color="red") +
}
rmse.plot = rmse.plot +
ggplot2::theme(axis.text.x = ggplot2::element_text(face = "bold", angle = -75, vjust = 0.5, hjust = 0)) +
ggplot2::theme(axis.text.y = ggplot2::element_text(face = "bold")) +
ggplot2::theme(axis.title.x = ggplot2::element_blank()) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour = "black", fill = NA, size = .5)) +
ggplot2::theme(aspect.ratio = 9/20) +
ggplot2::labs(y = "RMSE") +
ggplot2::ggtitle(bquote("RMSE by condition"))
if(length(data) == 1) rmse.plot = rmse.plot + ggplot2::theme(aspect.ratio = 20/9)
return(rmse.plot)
}
plotRMSE(data, age, genes.subset)
plotRMSE(data, age, genes.subset, m = m, d = d)
if(!load.age){
age <- readRDS(paste0(path.variables, "age.combined.rds"))
}
m <- lapply(age, function(x) x[1])
d <- lapply(age, function(x) x[2])
age <- lapply(age, function(x) x[-c(1, 2)])
plotRMSE(data, age, genes.subset, m = m, d = d)
!is(m, "list") || !is(d, "list")
plotRMSE(data[[1]], age[[1]], genes.subset[[1]], m = m[[1]], d = d[[1]])
plotRMSE(data[[1]], age[[1]], genes.subset[[1]])
plotRMSE(data, age, genes.subset)
plotRMSE(data, age, genes.subset, m = m, d = d)
plotRMSE(data.combined, age.combined, genes.subset.combined, do.boxplot = T)
plotRMSE(data, age, genes.subset, do.boxplot = T)
plotCoincidences(selected.genes)
plotCoincidences(selected.genes.combined[c("Amygdala", "Cortex", "Frontal Cortex (BA9)")])
plotCoincidences(selected.genes[c("Amygdala", "Cortex", "Frontal Cortex (BA9)")])
library(SuCoNets)
library(data.table)
#library(stringr)
library(doParallel)
library(dplyr)
library(glmnet)
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))
path.datasets <- "../datasets/"
path.variables <- "variables/"
# Comprobamos si ya hemos creado los datos previamente
load.data <- !file.exists(paste0(path.variables, "data.combined.rds"))
load.age <- !file.exists(paste0(path.variables, "age.combined.rds"))
if(load.data){
# Elejimos el órganos
tissue.selection <- "Brain"
df.samples_data <- fread(paste0(path.datasets, "sample_data.txt"))
df.samples_data <- df.samples_data[df.samples_data$SMTS == tissue.selection]
}
if(load.data){
# Generamos un data con todos los tejidos. El data no está preprocesado.
df.samples <- fread(paste0(path.datasets, "samples.gct"))
match_samples = intersect(colnames(df.samples), df.samples_data$SAMPID)
data <- df.samples[, ..match_samples]
data <- as.matrix(data, rownames = df.samples$Name)
# Eliminamos la variable de todos los datos, ya no la necesitamos
rm(df.samples)
gc()
}
library(caret)
dmy.matrix <- caret::dummyVars("SAMPID ~ SMTSD", data = df.samples_data)
df.bool_data <- data.frame(predict(dmy.matrix, newdata = df.samples_data))
View(dmy.matrix)
View(df.bool_data)
unique(df.samples_data$SAMPID)
unique(df.samples_data$SMTSD)
stringr::str_split(unique(df.samples_data$SMTSD), " - ", simplify = TRUE)
stringr::str_split(unique(df.samples_data$SMTSD), " - ", simplify = TRUE)[, 2]
sort(stringr::str_split(unique(df.samples_data$SMTSD), " - ", simplify = TRUE)[, 2])
View(df.bool_data)
condition.names <- sort(stringr::str_split(unique(df.samples_data$SMTSD), " - ", simplify = TRUE)[, 2])
colnames(df.bool_data) <- conditions.names
colnames(df.bool_data) <- condition.names
rownames(df.bool_data) <- df.samples_data$SAMPID
View(df.bool_data)
df.bool_data <- df.bool_data[match_samples, ]
View(df.bool_data)
gc()
